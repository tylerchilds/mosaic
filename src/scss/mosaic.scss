$gutter: 13px;
$font-size: initial;
$fixed-multiple: 25;
$break-points: (480, 767, 960);

.mosaic-row{
  position: relative;
  overflow: hidden;
  clear: both;
  text-align: left;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  /*
    Setting the font-size to zero to remove the white-space from
    the inline-block elements. It's important that any content
    inside a .mosaic-row be inside a .column element to reset
    the font-size. More info about inline-block white-space here:
    http://davidwalsh.name/remove-whitespace-inline-block
  */
  font-size: 0;

  /*
    The ghost, found in the article:
    http://css-tricks.com/centering-in-the-unknown/
  */
  &:before {
    content: '';
    display: inline-block;
    height: 100%;
    vertical-align: middle;
  }

  /* Left align column Content */
  &.left,
  .cell.left{
    text-align: left;
  }

  /* Center align column Content */
  &.center,
  .cell.center{
    text-align: center;
  }

  /* Right align section Content */
  &.right,
  .cell.right{
    text-align: right;
  }

  &.no-gutter .cell{
    padding: 0;
  }

  &.reverse{
    direction: rtl;
  }

  .cell{
    /*
      This is where we're resetting the font-size to compensate for the inline-block white-space. If initial doesn't work
      with whatever you're using, use a value that works with your css
    */
    font-size: $font-size;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    display: inline-block;
    vertical-align: top;
    position: relative;
    direction: ltr;

    /* gutter width is 26px, 13px left and right of the column */
    padding: $gutter / 2;

    /* Vertical Top */
    &.top {
      vertical-align: top;
    }

    /* Vertical Middle */
    &.middle {
      vertical-align: middle;
    }

    /* Vertical Bottom */
    &.bottom {
      vertical-align: bottom;
    }

    // generate grid cells
    @for $i from 1 through 12 {
      &.cell-#{$i} {
        width: ($i / 12 * 100%);
      }
    }

    // generate push offsets
    @for $i from 1 through 12 {
      &.push-#{$i}{
        left: ($i / 12 * 100%);
      }
    }

    // generate pull offsets
    @for $i from 1 through 12 {
      &.pull-#{$i}{
        left: -($i / 12 * 100%);
      }
    }

    /* These fixed columns need to display over any cell the overlap */
    &[class*="fixed-"]{
      z-index: 1;
    }

    // generate fixed columns
    @for $i from 1 through 16 {
      &.fixed-#{$i * $fixed-multiple}{
        width: ($i * $fixed-multiple)+px;
      }
    }

    // generate shared left offsets
    @for $i from 1 through 16 {
      &.contain-#{$i * $fixed-multiple}-left{
        padding-left: ($i * $fixed-multiple)+($gutter/2);
        margin-left: -($i * $fixed-multiple)+px;
      }
    }

    // generate shared right offsets
    @for $i from 1 through 16 {
      &.contain-#{$i * $fixed-multiple}-right{
        padding-right: ($i * $fixed-multiple)+($gutter/2);
        margin-right: -($i * $fixed-multiple)+px;
      }
    }
  }

  // create stacking thresholds
  @each $threshold in $break-points{
    @media screen and (max-width: ($threshold)+px){
      &.stack-#{$threshold}{

        & > .cell{
          width: 100%;
          left: 0;
        }

        & > .cell[class*="contain-"]{
          margin-left: 0;
          padding-left: $gutter / 2;
          margin-right: 0;
          padding-right: $gutter / 2;
        }
      }
    }
  }
}